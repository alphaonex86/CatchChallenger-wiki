= Databases manipulation =
* In case of databases manipulation: Always drop the used item from database, before insert update the new data generated.
** That's prevent hack on crash (if cash you lost the item used, but not use the item without drop from the inventory)
** '''Right way:''' You use recipe: Drop the recipe from database, if crash after this you lost you recipe, add the learned recipe the the databases.
** '''Wrong way:''' You use recipe: Add the recipe into the db, if crash after this you have you recipe and your recipe learned.
= Anti DDOS and cost infrastructure =
See: [http://catchchallenger.first-world.info/wiki/Technologies_used#Anti_DDOS_and_cost_infrastructure|Anti DDOS and cost infrastructure]
= Optimization =
To limit the DDOS attack effect and maximize the botnet required
= Async =
Async to prevent a externe element (under mad effect as DDOS) freeze the program
See: [http://catchchallenger.first-world.info/wiki/Technologies_used#Multiple_database_and_async|Multiple database and async]
= Auth =
All is after the authentication, then we need hardened the pre auth part.
* If an account create DDOS, it's easy to block it
* In case of automatic account creation, you need limit the creation rate
