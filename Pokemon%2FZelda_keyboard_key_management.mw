This page show how you can do a keyboard key management to have move like Pokemon/Zelda. It's done via Qt, but can be translated into other languages. That's mean:
* Change texture during the move, and exact position when the full step is done
* Quick arrow key press into other direction, just look
* Long arrow key press into other direction, look and move after 200ms if the arrow key continue to be pressed
* Quick arrow key press into same direction, just move
* At the final step, look is the move key continue to be pressed, if yes, continue the walk, else enter into looking (stopped).

= Texture and position =
The tileset for the player texture is like:

[[File:player_skin_simple.png]]

Where the tile number is:
 0 1 2
 3 4 5
 6 7 8
 9 10 11
The move is defined with initial position (0%), 2 intermediate position (33% and 66%) and the final position (100%).

= The full source =
The full source is used into map visualiser for the projet:
https://github.com/alphaonex86/CatchChallenger/blob/master/tools/map-visualiser-qt/map-visualiser-qt.cpp

= The code =
 <font color="#1f1c1b"><span><font color="#0057ae">void</font></span> MapVisualiserQt::keyPressEvent(QKeyEvent * event)
 {
     ''<span><font color="#898887">//ignore the repeated event</font></span>''
     '''if'''(event-&gt;isAutoRepeat())
         '''return'''<nowiki>;
 
     </nowiki>''<span><font color="#898887">//add to pressed key list</font></span>''
     keyPressed &lt;&lt; event-&gt;key();
 
     ''<span><font color="#898887">//apply the key</font></span>''
     keyPressParse();
 }
 
 <span><font color="#0057ae">void</font></span> MapVisualiserQt::keyPressParse()
 {
     ''<span><font color="#898887">//ignore is already in move</font></span>''
     '''if'''(inMove)
         '''return'''<nowiki>;
 
     '''if'''(keyPressed.contains(<span><font color="#b08000">16777234</font></span>))
     {
         ''<span><font color="#898887">//already turned on this direction, then try move into this direction</font></span>''
         '''if'''(direction==CatchChallenger::Direction_look_at_left)
         {
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_left,&amp;logicalMap,xPerso,yPerso,'''true'''))
                 '''return'''<nowiki>;</nowiki>''<span><font color="#898887">//Can't do at the left!</font></span>''
             ''<span><font color="#898887">//the first step</font></span>''
             direction=CatchChallenger::Direction_move_at_left;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>''<span><font color="#898887">//look in this direction</font></span>''
         '''else'''
         {
             playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">10</font></span>));
             direction=CatchChallenger::Direction_look_at_left;
             lookToMove.start();
         }
     }
     '''else''' '''if'''(keyPressed.contains(<span><font color="#b08000">16777236</font></span>))
     {
         ''<span><font color="#898887">//already turned on this direction, then try move into this direction</font></span>''
         '''if'''(direction==CatchChallenger::Direction_look_at_right)
         {
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_right,&amp;logicalMap,xPerso,yPerso,'''true'''))
                 '''return'''<nowiki>;</nowiki>''<span><font color="#898887">//Can't do at the right!</font></span>''
             ''<span><font color="#898887">//the first step</font></span>''
             direction=CatchChallenger::Direction_move_at_right;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>''<span><font color="#898887">//look in this direction</font></span>''
         '''else'''
         {
             playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">4</font></span>));
             direction=CatchChallenger::Direction_look_at_right;
             lookToMove.start();
         }
     }
     '''else''' '''if'''(keyPressed.contains(<span><font color="#b08000">16777235</font></span>))
     {
         ''<span><font color="#898887">//already turned on this direction, then try move into this direction</font></span>''
         '''if'''(direction==CatchChallenger::Direction_look_at_top)
         {
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_top,&amp;logicalMap,xPerso,yPerso,'''true'''))
                 '''return'''<nowiki>;</nowiki>''<span><font color="#898887">//Can't do at the top!</font></span>''
             ''<span><font color="#898887">//the first step</font></span>''
             direction=CatchChallenger::Direction_move_at_top;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>''<span><font color="#898887">//look in this direction</font></span>''
         '''else'''
         {
             playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">1</font></span>));
             direction=CatchChallenger::Direction_look_at_top;
             lookToMove.start();
         }
     }
     '''else''' '''if'''(keyPressed.contains(<span><font color="#b08000">16777237</font></span>))
     {
         ''<span><font color="#898887">//already turned on this direction, then try move into this direction</font></span>''
         '''if'''(direction==CatchChallenger::Direction_look_at_bottom)
         {
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_bottom,&amp;logicalMap,xPerso,yPerso,'''true'''))
                 '''return'''<nowiki>;</nowiki>''<span><font color="#898887">//Can't do at the bottom!</font></span>''
             ''<span><font color="#898887">//the first step</font></span>''
             direction=CatchChallenger::Direction_move_at_bottom;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>''<span><font color="#898887">//look in this direction</font></span>''
         '''else'''
         {
             playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">7</font></span>));
             direction=CatchChallenger::Direction_look_at_bottom;
             lookToMove.start();
         }
     }
 
     ''<span><font color="#898887">//do it here only because it's one player, then max 3 call by second</font></span>''
     viewport()-&gt;update();
 }
 
 <span><font color="#0057ae">void</font></span> MapVisualiserQt::moveStepSlot(<span><font color="#0057ae">bool</font></span> justUpdateTheTile)
 {
     <span><font color="#0057ae">int</font></span> baseTile=<span><font color="#b08000">1</font></span><nowiki>;
     </nowiki>''<span><font color="#898887">//move the player for intermediate step and define the base tile (define the stopped step with direction)</font></span>''
     '''switch'''(direction)
     {
         '''case''' CatchChallenger::Direction_move_at_left:
         baseTile=<span><font color="#b08000">10</font></span><nowiki>;
         </nowiki>'''switch'''(moveStep)
         {
             '''case''' <span><font color="#b08000">1</font></span><nowiki>:
             </nowiki>'''case''' <span><font color="#b08000">2</font></span><nowiki>:
             playerMapObject-&gt;setX(playerMapObject-&gt;x()-</nowiki><span><font color="#b08000">0.33</font></span>);
             '''break'''<nowiki>;
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''case''' CatchChallenger::Direction_move_at_right:
         baseTile=<span><font color="#b08000">4</font></span><nowiki>;
         </nowiki>'''switch'''(moveStep)
         {
             '''case''' <span><font color="#b08000">1</font></span><nowiki>:
             </nowiki>'''case''' <span><font color="#b08000">2</font></span><nowiki>:
             playerMapObject-&gt;setX(playerMapObject-&gt;x() </nowiki><span><font color="#b08000">0.33</font></span>);
             '''break'''<nowiki>;
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''case''' CatchChallenger::Direction_move_at_top:
         baseTile=<span><font color="#b08000">1</font></span><nowiki>;
         </nowiki>'''switch'''(moveStep)
         {
             '''case''' <span><font color="#b08000">1</font></span><nowiki>:
             </nowiki>'''case''' <span><font color="#b08000">2</font></span><nowiki>:
             playerMapObject-&gt;setY(playerMapObject-&gt;y()-</nowiki><span><font color="#b08000">0.33</font></span>);
             '''break'''<nowiki>;
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''case''' CatchChallenger::Direction_move_at_bottom:
         baseTile=<span><font color="#b08000">7</font></span><nowiki>;
         </nowiki>'''switch'''(moveStep)
         {
             '''case''' <span><font color="#b08000">1</font></span><nowiki>:
             </nowiki>'''case''' <span><font color="#b08000">2</font></span><nowiki>:
             playerMapObject-&gt;setY(playerMapObject-&gt;y() </nowiki><span><font color="#b08000">0.33</font></span>);
             '''break'''<nowiki>;
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''default'''<nowiki>:
         qDebug() &lt;&lt; QString(</nowiki><span><font color="#bf0303">"moveStepSlot(): moveStep: %1, justUpdateTheTile: %2, wrong direction"</font></span>).arg(moveStep).arg(justUpdateTheTile);
         '''return'''<nowiki>;
     }
 
     </nowiki>''<span><font color="#898887">//apply the right step of the base step defined previously by the direction</font></span>''
     '''switch'''(moveStep)
     {
         ''<span><font color="#898887">//stopped step</font></span>''
         '''case''' <span><font color="#b08000">0</font></span><nowiki>:
         playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(baseTile </nowiki><span><font color="#b08000">0</font></span>));
         '''break'''<nowiki>;
         </nowiki>''<span><font color="#898887">//transition step</font></span>''
         '''case''' <span><font color="#b08000">1</font></span><nowiki>:
         playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(baseTile-</nowiki><span><font color="#b08000">1</font></span>));
         '''break'''<nowiki>;
         </nowiki>'''case''' <span><font color="#b08000">2</font></span><nowiki>:
         playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(baseTile </nowiki><span><font color="#b08000">1</font></span>));
         '''break'''<nowiki>;
         </nowiki>''<span><font color="#898887">//stopped step</font></span>''
         '''case''' <span><font color="#b08000">3</font></span><nowiki>:
         playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(baseTile </nowiki><span><font color="#b08000">0</font></span>));
         '''break'''<nowiki>;
     }
 
     moveStep  ;
 
     </nowiki>''<span><font color="#898887">//if have finish the step</font></span>''
     '''if'''(moveStep&gt;<span><font color="#b08000">3</font></span>)
     {
         ''<span><font color="#898887">//set the final value (direction, position, ...)</font></span>''
         '''switch'''(direction)
         {
             '''case''' CatchChallenger::Direction_move_at_left:
             direction=CatchChallenger::Direction_look_at_left;
             xPerso-=<span><font color="#b08000">1</font></span><nowiki>;
             </nowiki>'''break'''<nowiki>;
             </nowiki>'''case''' CatchChallenger::Direction_move_at_right:
             direction=CatchChallenger::Direction_look_at_right;
             xPerso =<span><font color="#b08000">1</font></span><nowiki>;
             </nowiki>'''break'''<nowiki>;
             </nowiki>'''case''' CatchChallenger::Direction_move_at_top:
             direction=CatchChallenger::Direction_look_at_top;
             yPerso-=<span><font color="#b08000">1</font></span><nowiki>;
             </nowiki>'''break'''<nowiki>;
             </nowiki>'''case''' CatchChallenger::Direction_move_at_bottom:
             direction=CatchChallenger::Direction_look_at_bottom;
             yPerso =<span><font color="#b08000">1</font></span><nowiki>;
             </nowiki>'''break'''<nowiki>;
             </nowiki>'''default'''<nowiki>:
             qDebug() &lt;&lt; QString(</nowiki><span><font color="#bf0303">"moveStepSlot(): moveStep: %1, justUpdateTheTile: %2, wrong direction when moveStep&gt;2"</font></span>).arg(moveStep).arg(justUpdateTheTile);
             '''return'''<nowiki>;
         }
         </nowiki>''<span><font color="#898887">//move to the final position (integer), y 1 because the tile lib start y to 1, not 0</font></span>''
         playerMapObject-&gt;setPosition(QPoint(xPerso,yPerso <span><font color="#b08000">1</font></span>));
 
 	''<span><font color="#898887">//check if one arrow key is pressed to continue to move into this direction</font></span>''
         '''if'''(keyPressed.contains(<span><font color="#b08000">16777234</font></span>))
         {
             ''<span><font color="#898887">//if can go, then do the move</font></span>''
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_left,&amp;logicalMap,xPerso,yPerso,'''true'''))
             {
                 direction=CatchChallenger::Direction_look_at_left;
                 playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">10</font></span>));
                 inMove='''false'''<nowiki>;
             }
             </nowiki>''<span><font color="#898887">//can go into this direction, then just look into this direction</font></span>''
             '''else'''
             {
                 direction=CatchChallenger::Direction_move_at_left;
                 moveStep=<span><font color="#b08000">0</font></span><nowiki>;
                 moveStepSlot(</nowiki>'''true''');
             }
         }
         '''else''' '''if'''(keyPressed.contains(<span><font color="#b08000">16777236</font></span>))
         {
             ''<span><font color="#898887">//if can go, then do the move</font></span>''
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_right,&amp;logicalMap,xPerso,yPerso,'''true'''))
             {
                 direction=CatchChallenger::Direction_look_at_right;
                 playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">4</font></span>));
                 inMove='''false'''<nowiki>;
             }
             </nowiki>''<span><font color="#898887">//can go into this direction, then just look into this direction</font></span>''
             '''else'''
             {
                 direction=CatchChallenger::Direction_move_at_right;
                 moveStep=<span><font color="#b08000">0</font></span><nowiki>;
                 moveStepSlot(</nowiki>'''true''');
             }
         }
         '''else''' '''if'''(keyPressed.contains(<span><font color="#b08000">16777235</font></span>))
         {
             ''<span><font color="#898887">//if can go, then do the move</font></span>''
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_top,&amp;logicalMap,xPerso,yPerso,'''true'''))
             {
                 direction=CatchChallenger::Direction_look_at_top;
                 playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">1</font></span>));
                 inMove='''false'''<nowiki>;
             }
             </nowiki>''<span><font color="#898887">//can go into this direction, then just look into this direction</font></span>''
             '''else'''
             {
                 direction=CatchChallenger::Direction_move_at_top;
                 moveStep=<span><font color="#b08000">0</font></span><nowiki>;
                 moveStepSlot(</nowiki>'''true''');
             }
         }
         '''else''' '''if'''(keyPressed.contains(<span><font color="#b08000">16777237</font></span>))
         {
             ''<span><font color="#898887">//if can go, then do the move</font></span>''
             '''if'''(!CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_bottom,&amp;logicalMap,xPerso,yPerso,'''true'''))
             {
                 direction=CatchChallenger::Direction_look_at_bottom;
                 playerMapObject-&gt;setTile(playerTileset-&gt;tileAt(<span><font color="#b08000">7</font></span>));
                 inMove='''false'''<nowiki>;
             }
             </nowiki>''<span><font color="#898887">//can go into this direction, then just look into this direction</font></span>''
             '''else'''
             {
                 direction=CatchChallenger::Direction_move_at_bottom;
                 moveStep=<span><font color="#b08000">0</font></span><nowiki>;
                 moveStepSlot(</nowiki>'''true''');
             }
         }
         ''<span><font color="#898887">//now stop walking, no more arrow key is pressed</font></span>''
         '''else'''
         {
             playerMapObject-&gt;setPosition(QPoint(xPerso,yPerso <span><font color="#b08000">1</font></span>));
             inMove='''false'''<nowiki>;
         }
     }
     </nowiki>'''else'''
         moveTimer.start();
 
     ''<span><font color="#898887">//do it here only because it's one player, then max 3 call by second</font></span>''
     '''if'''(!justUpdateTheTile)
         viewport()-&gt;update();
 }
 
 ''<span><font color="#898887">//have look into another direction, if the key remain pressed, apply like move</font></span>''
 <span><font color="#0057ae">void</font></span> MapVisualiserQt::transformLookToMove()
 {
     '''if'''(inMove)
         '''return'''<nowiki>;
 
     </nowiki>'''switch'''(direction)
     {
         '''case''' CatchChallenger::Direction_look_at_left:
         '''if'''(keyPressed.contains(<span><font color="#b08000">16777234</font></span>) &amp;&amp; CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_left,&amp;logicalMap,xPerso,yPerso,'''true'''))
         {
             direction=CatchChallenger::Direction_move_at_left;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''case''' CatchChallenger::Direction_look_at_right:
         '''if'''(keyPressed.contains(<span><font color="#b08000">16777236</font></span>) &amp;&amp; CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_right,&amp;logicalMap,xPerso,yPerso,'''true'''))
         {
             direction=CatchChallenger::Direction_move_at_right;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''case''' CatchChallenger::Direction_look_at_top:
         '''if'''(keyPressed.contains(<span><font color="#b08000">16777235</font></span>) &amp;&amp; CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_top,&amp;logicalMap,xPerso,yPerso,'''true'''))
         {
             direction=CatchChallenger::Direction_move_at_top;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''case''' CatchChallenger::Direction_look_at_bottom:
         '''if'''(keyPressed.contains(<span><font color="#b08000">16777237</font></span>) &amp;&amp; CatchChallenger::MoveOnTheMap::canGoTo(CatchChallenger::Direction_move_at_bottom,&amp;logicalMap,xPerso,yPerso,'''true'''))
         {
             direction=CatchChallenger::Direction_move_at_bottom;
             inMove='''true'''<nowiki>;
             moveStep=</nowiki><span><font color="#b08000">1</font></span><nowiki>;
             moveStepSlot();
         }
         </nowiki>'''break'''<nowiki>;
         </nowiki>'''default'''<nowiki>:
         qDebug() &lt;&lt; QString(</nowiki><span><font color="#bf0303">"transformLookToMove(): wrong direction"</font></span>);
         '''return'''<nowiki>;
     }
 }
 
 </nowiki><span><font color="#0057ae">void</font></span> MapVisualiserQt::keyReleaseEvent(QKeyEvent * event)
 {
     ''<span><font color="#898887">//ignore the repeated event</font></span>''
     '''if'''(event-&gt;isAutoRepeat())
         '''return'''<nowiki>;
 
     </nowiki>''<span><font color="#898887">//remove from the key list pressed</font></span>''
     keyPressed.remove(event-&gt;key());
 
     '''if'''(keyPressed.size()&gt;<span><font color="#b08000">0</font></span>)''<span><font color="#898887">//another key pressed, repeat</font></span>''
         keyPressParse();
 }</font>
