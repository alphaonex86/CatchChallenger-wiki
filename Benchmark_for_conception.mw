The Qt benchmark have been do by gcc 4.5, Qt 4.8, Qt 5.0 alpha, and this benchmark application: https://github.com/alphaonex86/QtSignalsSlotsBenchmark
Have look to: http://catchchallenger.first-world.info/benchmark-tracking/view.php

= Connection system =
== Connection by seconds ==
Greater is better
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Thread: 1, previous connection: 10000
! Thread: 8, previous connection: 10000
! Thread: 64, previous connection: 10000
! Thread: 64, previous connection: 1000
! Thread: 64, previous connection: 100
|-
| Qt4 with 2 slots + 2 signals
| 526316
| 526316
| 526316
| 500000
| 526316
|-
| Qt4 with 1000 slots + 1000 signals
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 31645
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 31645
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 31545
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 31746
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 31446
|-
| Qt5 (old syntax)
| 476190
| 500000
| 500000
| 500000
| 500000
|-
| Qt5 (new syntax) with 2 slots + 2 signals
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 909091
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 909091
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1000000
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1000000
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 909091
|-
| Qt5 (new syntax) with 1000 slots + 1000 signals
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 500000
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 500000
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 500000
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 500000
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 500000
|}

== Time to disconnect ==
=== With arguments ===
Lower is better, the time is in second. Try disconnect(sender,SIGNAL(),receiver,SLOT());
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Thread: 1, previous connection: 10000
! Thread: 8, previous connection: 10000
! Thread: 64, previous connection: 10000
! Thread: 64, previous connection: 100000
! Thread: 64, previous connection: 1000000
! Thread: 64, previous connection: 1000
! Thread: 64, previous connection: 100

|-
| Qt4
| 1.35
| 1.375
| 1.369
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | '''11.6'''
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | '''103'''
| 0.888
| 0.817
|-
| Qt5 (old syntax)
| 1.469
| 1.495
| 1.51
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | '''12.5'''
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | '''117'''
| 0.993
| 0.933
|-
| Qt5 (new syntax)
| 1.653
| 1.573
| 1.568
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | '''19.5'''
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | '''212'''
| 0.993
| 0.93
|}
Is this case with catchchallenger with just 1000 client (each client need ~ 1000 connection inter-thread), your server is out, it use 117s to disconnect a client (and potential free during this time).

=== Without arguments ===
Lower is better, the time is in second. this->disconnect();
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Where 10000000 connections already setup
! Where 30000000 connections already setup
! 10000000 connections for other objects
|-
| Qt5 (new syntax)
| 0.205
| 0.583
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 0
|}
Is this case with catchchallenger with just 1000 client (each client need ~ 1000 connection inter-thread), your server is out, it use 117s to disconnect a client (and potential free during this time). Not depands of number of signals/slots defined into the class with Qt5.

= Messages =
The signals/slots are connected by: Qt::QueuedConnection like for threaded usage.
== Messages send ==
Greater is better
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Thread: 1, previous connection: 10000
! Thread: 8, previous connection: 10000
! Thread: 64, previous connection: 10000
! Thread: 64, previous connection: 1000
! Thread: 64, previous connection: 100
|-
| Qt4
| 169870
| 171612
| 172446
| 175223
| 174128
|-
| Qt5
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 275285
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 279835
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 277826
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 277117
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 274924
|}
Here we can see '''+60% of performance''' when we use Qt5. Any change in any version of Qt if have 2 or 1000 signals/slots declared on the class.

I count 3 signals passed to reply (QTcpSocket -> ClientRead, ClientReadSocket -> Thread to parse, Thread to parse -> ClientWriteSocket). In worse case I'm to 169870/3 ~= 56000. With 10 000 client connected, that's mean 5.6 signals/s by player. With 200ms of foot step (the worst case), that's mean -5 signals/s, then remaining 0.6 req/s. In the worst case, with normal pc, and large number of player, with the worst version of Qt.

== Cpu usage ==
The value is in ms, lower is better
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Thread: 1, previous connection: 10000
! Thread: 8, previous connection: 10000
! Thread: 64, previous connection: 10000
! Thread: 64, previous connection: 1000
! Thread: 64, previous connection: 100
|-
| Qt4
| 1050
| 1030
| 910
| 810
| 970
|-
| Qt5
| 910
| 830
| 810
| 870
| 880
|}
== System cpu usage ==
The value is in ms, lower is better
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Thread: 1, previous connection: 10000
! Thread: 8, previous connection: 10000
! Thread: 64, previous connection: 10000
! Thread: 64, previous connection: 1000
! Thread: 64, previous connection: 100
|-
| Qt4
| 280
| 250
| 300
| 350
| 320
|-
| Qt5
| 200
| 260
| 270
| 230
| 210
|}
Qt5 seam have performance, but due to fluctuation of the benchmark, is better of not trust on it.

= Container =
== To store the player pointer, with full look up ==
Store 65535 pointer.
* Insert the current player, into the 65534 list.
* List the 65535 player to send the broadcast message.
* Remove the current player of the 65535 list.
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Insert
! List
! Remove
|-
| QList
| 0
| 1
| 1
|-
| QSet
| 0
| 6
| 6
|}

= String =
Lower is better (https://github.com/alphaonex86/CatchChallenger/tree/master/tools/benchmarkstring), done with gcc 4.7, debug Qt 5.2 with c++11, format:
* QStringLiteral, where QStringLiteral("string")
* QLatin1String, where QLatin1String("string")
* QString, where QString("string")
* QLatin1Literal, where QLatin1Literal("string")
* Char*, where "string"
* Prepared, where use directly QString variable
Test:
* Condition with != and ==: test into condition
* QDomElement::hasAttribute(): test as function arguements
* concat by +: concat
* replace format to QString: var.replace(FORMAT ABOVE,varQString);
* replace format to format: var.replace(FORMAT ABOVE,FORMAT ABOVE);
* search replace string to format: varQString(regex,FORMAT ABOVE);
* search replace format to string: FORMAT ABOVE.replace(regex,varQString);
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Condition with != and ==
! QDomElement::hasAttribute()
! concat by +
! Replace format to QString
! Replace format to format
! Search replace string to format
! Search replace format to string
|-
| QStringLiteral
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 3936ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1947ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4161ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2957ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 5140ms
| 11986ms
| 11877ms
|-
| QLatin1String
| 204ms
| 1507ms
| 3771ms
| 1559ms
| 2142ms
| 11194ms
| NA
|-
| QString
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4586ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2280ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4589ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 3288ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 5741ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 12310ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 12145ms
|-
| QLatin1Literal
| 231ms
| 1505ms
| 3775ms
| 1555ms
| 2130ms
| 11207ms
| NA
|-
| Char*
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4630ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2339ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4275ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 3364ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 5811ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 12291ms
| NA
|-
| Prepared
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 92ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 31ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2492ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1280ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 237ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 9472ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 9313ms
|}
And now with CONFIG += c++11:
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! Condition with != and ==
! QDomElement::hasAttribute()
! concat by +
! Replace format to QString
! Replace format to format
! Search replace string to format
! Search replace format to string
|-
| QStringLiteral
| 275ms
| 128ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2379ms
| 1036ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1158ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 8077ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 7592ms
|-
| QLatin1String
| 163ms
| 1371ms
| 3792ms
| 1180ms
| 1744ms
| 9963ms
| NA
|-
| QString
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 3589ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1789ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 3855ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2698ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4542ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 9841ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 9751ms
|-
| QLatin1Literal
| 156ms
| 1369ms
| 3948ms
| 1187ms
| 1814ms
| 10193ms
| NA
|-
| Char*
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4544ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1830ms
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 3714ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2744ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 4711ms
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 10254ms
| NA
|-
| Prepared
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 66ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 23ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2104ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 802ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 211ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 7885ms
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 7877ms
|}
Using prepared string, the loading datapack of the datapack (mostly Xml parsing time + file access time) '''1560ms -> 742ms''' (https://github.com/alphaonex86/CatchChallenger/commit/4eeece9d5169d125fcfdbc2126629cdd2a75fe1c).
= String in C++ =
Lower is better (https://github.com/alphaonex86/CatchChallenger/tree/master/tools/benchmarkstring), done with gcc 4.7, debug Qt 5.2 with c++11, format:
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! ARMv7 Cortex A9
! Intel x86 haswell
|-
| std::string::find("test")
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 
| style="background:#FFD99E; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 56000 cycles
|-
| std::string::find(std::string)
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 52500 cycles
|-
| nop
| 
| 4200 cycles
|}
* Mean (56000-4200)/(52500-4200): 7% better on x86

= Send to all object =
* Case 1: 600x <pre>connect(timer to object)</pre> to send to all object
* Case 2: connect(timer to object with QList), into object with QList do:
<pre>
int index=0;
while(index<objectlist.size())
{
    objectlist.at(index)->call();
    index++;
}
</pre>
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! % of Cpu
|-
| Case 1
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 21%
|-
| Case 2
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 2,5%
|}
That's mean: '''8,4x performance improvement''' for only 600 objet... imagine with 65535 object (then player) as I plan...

= Ssl vs Clear =
I have do this comparison with: https://github.com/alphaonex86/CatchChallenger/tree/master/tools/epoll-server/epoll-ssl-server-skeleton with typical small packet use in CatchChallenger

It's '''24x more slow with Ssl than clear'''. Mostly because it's small packet (<10 bytes) sended with big interval (>1s), the OS can't group it, then need do lot of syscall. The ssl is not needed in this case:
* Use over crypted network like I2P or ipsec (I have not found this informations for TOR)
* Don't need security (don't use crypto currency) and need greate performance (embed device)

= memcpy vs raw =
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! x86 Intel haswell, 64Bits
! Arm Cortex A9 Quad core, 32Bits, with grsecurity (PAX) on linux kernel
|-
| memcpy
| 1.4s
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 7.0s
|-
| raw
| 1.2s
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1.2s
|}
Then why use memcpy? To large block of data (use SIMD to great speed improvement), access to unaligned 64Bits integer on 32Bits platform.
Raw mean: pointer + reinterpret cast, effective on small amount of data.

= Hash and control sum =
{| class="wikitable sortable" style="text-align: center; font-size: 85%; width: auto; table-layout: fixed;"
|-
! style="width: 12em" |
! x86 Intel haswell, 64Bits
! Arm cortex A9 Quad core, 32Bits, with grsecurity (PAX) on linux kernel
|-
| sha224
| 650KH/s
| style="background:#ff9090; color:black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 36KH/s
|-
| xxhash
| 115KH/s
| 
|-
| xxhash -march=native -O2
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1700KH/s
| 35KH/s
|-
| xxhash -march=native -O2 -fomit-frame-pointer -floop-block -floop-interchange -fgraphite -funroll-loops -ffast-math -faggressive-loop-optimizations -funsafe-loop-optimizations
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1700KH/s
| 
|-
| xxhash -pipe -march=native -O2 -fomit-frame-pointer -floop-block -funroll-loops -ffast-math -funsafe-loop-optimizations
| style="background: #90ff90; color: black; vertical-align: middle; text-align: {{{align|center}}}; {{{style|}}}" | 1700KH/s
| 31KH/s
|}
Intel haswell have hardware acceleration for sha224. Internal tool (sha224 of Qt) as "''cryptsetup benchmark''" give around the same result, Qt is 10% slower.
